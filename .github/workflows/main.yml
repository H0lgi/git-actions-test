on: 
  workflow_dispatch:
    inputs:
      task-docker-image:
        description: 'Docker image, which will try to solve the challenge'     
        required: true
        default: 'ubuntu:latest'
      task-docker-command:
        description: 'Command, which will be executed in the docker container'     
        required: true
        default: ''
      task-challenge-input-directory:
        description: 'Directory in which the input data can be accessed from the container'     
        required: true
        default: '/inputDataset'
      task-challenge-output-directory:
        description: 'Directory in which the challenge output data should be stored'     
        required: true
        default: '/outputOfRun'
        
      eval-docker-image:
        description: 'Docker image, which will evaluate the prediction'     
        required: true
        default: 'ubuntu:latest'
      eval-docker-command:
        description: 'Command, which will be executed in the evaluation docker container'     
        required: true
        default: ''
      eval-ground-truth-directory:
        description: 'Directory in which the ground truth data can be accessed from the evaluation container'     
        required: true
        default: '/inputGroundTruth'
      eval-output-directory:
        description: 'Directory in which the ground truth data can be accessed from the evaluation container'     
        required: true
        default: '/outputEval'
      
      cpu-cores:
        description: 'Number of CPU Cores for the runner'     
        required: false
        default: '2'
      ram-gb:
        description: 'Amount of RAM in GB for the runner'     
        required: false
        default: '7'
        
jobs:
  task-container:
    runs-on: ubuntu-latest
    name: run task container
    #outputs:
    #  output-from-docker: ${{ steps.docker.outputs.result }}
    steps:
  
      # get content of Repository into the current workingdirectory
      - name: Checkout Repo
        uses: actions/checkout@v3
        
      - name: docker-run
        uses: addnab/docker-run-action@v3
        with:
          #username: ${{ secrets.DOCKER_USERNAME }}
          #password: ${{ secrets.DOCKER_PASSWORD }}
          #registry: gcr.io
          image: ${{ inputs.task-docker-image }}
          options: | 
            -v /$(pwd)/${{ inputs.task-challenge-input-directory }}:/input
            -v /$(pwd)/${{ inputs.task-challenge-output-directory }}:/output
            -e "inputDataset=/input"
            -e "outputDataset=/output"
            --network none
          #shell: bash
          run: ${{ inputs.task-docker-command }}

      - name: debug print output dir
        run: ls -la /$(pwd)/{{ inputs.task-challenge-output-directory }}

      - uses: actions/cache@v3
        with:
          path: |
            /$(pwd)/${{ inputs.task-challenge-output-directory }}
          key: output-dir-key-${{ github.run_id }}

      #- name: Display the output
      #  run: echo "The result was ${{ steps.docker.outputs.result }}"
        
  evaluate-container:
    needs: task-container
    runs-on: ubuntu-latest
    outputs:
      eval-result: ${{ steps.docker-run-eval.outputs.result }}
    steps:
  
      # get content of Repository into the current workingdirectory
      - name: Checkout Repo
        uses: actions/checkout@v3
        
      - uses: actions/cache@v3
        with:
          path: /$(pwd)/${{ inputs.task-challenge-output-directory }}
          key: output-dir-key-${{ github.run_id }}
        
      - name: docker-run-eval
        uses: addnab/docker-run-action@v3
        with:
          #username: ${{ secrets.DOCKER_USERNAME }}
          #password: ${{ secrets.DOCKER_PASSWORD }}
          #registry: gcr.io
          image: ${{ inputs.eval-docker-image }}
          # input data (/inputRun) = output data of the to be evaluted container run
          options: | 
            -v /$(pwd)/${{ inputs.task-challenge-output-directory }}:/toBeEvaluated
            -v /$(pwd)/${{ inputs.eval-ground-truth-directory }}:/groundTruth
            -v /$(pwd)/${{ inputs.eval-output-directory }}:/outputEval
            -e "inputRun=/toBeEvaluated"
            -e "inputDataset=/groundTruth"
            -e "outputDir=/outputEval"
            --network none
          #shell: bash
          run: ${{ inputs.eval-docker-command }}
         
      - name: 'Upload Eval Result'
        uses: actions/upload-artifact@v3
        with:
          name: evaluation-result
          path: /$(pwd)/${{ inputs.eval-output-directory }}
          retention-days: 3
